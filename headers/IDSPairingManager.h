/*
* This header is generated by classdump-dyld 1.0
* on Thursday, March 2, 2023 at 12:48:11 PM Israel Standard Time
* Operating System: Version 11.2.3 (Build 20D91)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/Contents/MacOS/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/IDSUTunDeliveryControllerConnectivityDelegate.h>

@class NSHashTable, IDSCountdown, NSMutableDictionary, IDSNRDeviceManager, IDSPairedDeviceRepository, NSMutableArray, NSString, NSDictionary, NSSet, NSData;

@interface IDSPairingManager : NSObject <IDSUTunDeliveryControllerConnectivityDelegate> {

	NSHashTable* _delegateMap;
	char _hasLoadedPairedDevices;
	int _pairingStateToken;
	/*^block*/id _block;
	char _isPendingResetOfKeyRegenerationFlag;
	IDSCountdown* _pairedDeviceInfoRequestCountdown;
	NSMutableDictionary* _cbuuidToBTOutOfBandKeyDictionary;
	char _shouldQuickSwitchAfterIPSecConnected;
	IDSNRDeviceManager* _nrDeviceManager;
	IDSPairedDeviceRepository* _pairedDeviceRepository;
	NSMutableArray* _registeredPairedDeviceDidConnectBlockPairs;

}

@property (nonatomic,readonly) IDSNRDeviceManager * nrDeviceManager;                                     //@synthesize nrDeviceManager=_nrDeviceManager - In the implementation block
@property (nonatomic,readonly) IDSPairedDeviceRepository * pairedDeviceRepository;                       //@synthesize pairedDeviceRepository=_pairedDeviceRepository - In the implementation block
@property (nonatomic,readonly) NSMutableArray * registeredPairedDeviceDidConnectBlockPairs;              //@synthesize registeredPairedDeviceDidConnectBlockPairs=_registeredPairedDeviceDidConnectBlockPairs - In the implementation block
@property (assign,nonatomic) char shouldQuickSwitchAfterIPSecConnected;                                  //@synthesize shouldQuickSwitchAfterIPSecConnected=_shouldQuickSwitchAfterIPSecConnected - In the implementation block
@property (nonatomic,readonly) NSString * pairedDeviceUUIDString; 
@property (nonatomic,readonly) NSString * pairedDeviceUniqueID; 
@property (nonatomic,readonly) unsigned pairedDevicePairingProtocolVersion; 
@property (nonatomic,readonly) unsigned pairedDeviceMinCompatibilityVersion; 
@property (nonatomic,readonly) unsigned pairedDeviceMaxCompatibilityVersion; 
@property (nonatomic,readonly) unsigned short pairedDeviceServiceMinCompatibilityVersion; 
@property (nonatomic,readonly) NSDictionary * pairedDevice; 
@property (nonatomic,readonly) NSSet * allPairedDevices; 
@property (nonatomic,readonly) NSData * pairedDevicePublicKey; 
@property (nonatomic,readonly) NSData * pairedDevicePublicClassAKey; 
@property (nonatomic,readonly) NSData * pairedDevicePublicClassCKey; 
@property (nonatomic,readonly) NSData * pairedDevicePushToken; 
@property (nonatomic,readonly) NSDictionary * pairedDevicePrivateData; 
@property (nonatomic,readonly) NSDictionary * localDevice; 
@property (nonatomic,readonly) char isPaired; 
@property (nonatomic,readonly) char isCurrentDeviceTinkerConfiguredWatch; 
@property (nonatomic,readonly) NSSet * allPairedUniqueIDs; 
@property (nonatomic,readonly) NSSet * allTraditionallyPairedUniqueIDs; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedInstance;
+(void)devicePairingProtocolVersion:(unsigned*)arg1 minCompatibilityVersion:(unsigned*)arg2 maxCompatibilityVersion:(unsigned*)arg3 ;
+(char)_isEncryptionKeyRegenerationSupportedByCapabilityFlags:(unsigned long long)arg1 ;
+(char)_isIPsecSupportedByCapabilityFlags:(unsigned long long)arg1 ;
+(char)_isTinkerPairedInCapabilityFlags:(unsigned long long)arg1 ;
-(void)dealloc;
-(NSString *)description;
-(id)init;
-(void)removeDelegate:(id)arg1 ;
-(void)addDelegate:(id)arg1 ;
-(NSDictionary *)localDevice;
-(void)systemDidLeaveFirstDataProtectionLock;
-(char)setPairedDeviceInfo:(id)arg1 ;
-(void)deactivatePairedDevices;
-(NSDictionary *)pairedDevice;
-(char)isPaired;
-(NSSet *)allPairedDevices;
-(NSData *)pairedDevicePublicKey;
-(NSData *)pairedDevicePublicClassAKey;
-(NSData *)pairedDevicePublicClassCKey;
-(id)allPairedDevicesWithType:(long long)arg1 ;
-(long long)activatePairedDeviceWithCBUUID:(id)arg1 ;
-(char)updatePairedDeviceWithCBUUID:(id)arg1 supportIPsec:(char)arg2 ;
-(char)shouldUseIPsecLinkForDefaultPairedDevice;
-(char)isCurrentDeviceTinkerConfiguredWatch;
-(char)activePairedDeviceHasPairingType:(long long)arg1 ;
-(NSString *)pairedDeviceUniqueID;
-(void)deliveryController:(id)arg1 foundNearbyIPsecCapableDeviceWithUniqueID:(id)arg2 ;
-(void)gatherLocalDeviceInfoWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)isCurrentDevicePairedOrPairing;
-(char)isTraditionalDevicePairedOrPairing;
-(NSSet *)allPairedUniqueIDs;
-(NSSet *)allTraditionallyPairedUniqueIDs;
-(unsigned)pairedDevicePairingProtocolVersion;
-(unsigned)pairedDeviceMinCompatibilityVersion;
-(unsigned)pairedDeviceMaxCompatibilityVersion;
-(unsigned short)pairedDeviceServiceMinCompatibilityVersion;
-(NSString *)pairedDeviceUUIDString;
-(NSDictionary *)pairedDevicePrivateData;
-(id)pairedDeviceForUniqueID:(id)arg1 ;
-(id)cbuuidsOfPairingDevices;
-(id)cbuuidsOfPairedDevices;
-(char)updatePairedDeviceBuildVersion:(id)arg1 productVersion:(id)arg2 productName:(id)arg3 pairingProtocolVersion:(unsigned)arg4 minCompatibilityVersion:(unsigned)arg5 maxCompatibilityVersion:(unsigned)arg6 serviceMinCompatibilityVersion:(unsigned short)arg7 capabilityFlags:(unsigned long long)arg8 deviceUniqueID:(id)arg9 ;
-(void)_notifyDelegatesWithBlock:(/*^block*/id)arg1 ;
-(IDSPairedDeviceRepository *)pairedDeviceRepository;
-(char)_hasAllEncryptionKeys;
-(void)_requestPairedDeviceInfo;
-(void)_requestPairedDeviceInfoAfterDelay:(double)arg1 ;
-(id)initWithNRDeviceManager:(id)arg1 pairedDeviceRepository:(id)arg2 ;
-(void)_loadPairedDevicePropertiesIfNeeded;
-(char)_markSecuredEncryptionKeysAsRegenerated:(char)arg1 ;
-(void)_suspendOTRSessionsWithProtectionClass:(unsigned)arg1 ;
-(id)_localDevicePrivateData;
-(id)_activePairedDeviceCBUUID;
-(char)_isPairedToDevice:(id)arg1 ;
-(void)_updateActiveStateForAllPairedDevices:(char)arg1 ;
-(void)setShouldQuickSwitchAfterIPSecConnected:(char)arg1 ;
-(id)_nrDeviceIdentifierWithCBUUID:(id)arg1 ;
-(IDSNRDeviceManager *)nrDeviceManager;
-(void)_updateActiveStateForAllPairedDevices;
-(char)isMissingAnyPublicKeyForPairedDeviceWithCBUUID:(id)arg1 ;
-(id)_cbuuidsWithIsPairingValue:(char)arg1 ;
-(id)_identityDataErrorPairForDataProtectionClass:(unsigned)arg1 ;
-(char)shouldUseIPsecLinkForDefaultPairedDeviceAndLogQuery:(char)arg1 ;
-(NSMutableArray *)registeredPairedDeviceDidConnectBlockPairs;
-(void)_clearPairedDeviceDidConnectBlocksForUniqueID:(id)arg1 ;
-(long long)pairedDevicePairingType;
-(id)_createRegistrationProperties:(char)arg1 maxCompatibilityVersion:(id)arg2 BTOutOfBandKey:(id)arg3 supportsIPsecWithSPPLink:(char)arg4 bluetoothMACAddress:(id)arg5 ;
-(void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 properties:(id)arg2 shouldPairDirectlyOverIPsec:(char)arg3 ;
-(NSData *)pairedDevicePushToken;
-(id)pairedDeviceiCloudURIs;
-(char)_purgeSecuredEncryptionKeysForAllPairedDevices;
-(char)shouldQuickSwitchAfterIPSecConnected;
-(void)_callPairedDeviceDidConnectBlocksForUniqueID:(id)arg1 withError:(id)arg2 ;
-(void)_notifyDelegatesDevicePairedToDevice:(id)arg1 ;
-(void)_notifyDelegatesDeviceUnpairedFromDevice:(id)arg1 ;
-(long long)_migrateSecuredEncryptionKeys;
-(unsigned long long)_hasRegeneratedSecuredEncryptionKeys;
-(void)_regenerateSecuredEncryptionKeys;
-(id)pairedDeviceBuildVersion;
-(id)pairedDeviceProductVersion;
-(id)pairedDeviceProductName;
-(id)pairedDeviceHandlesWithPairingType:(long long)arg1 ;
-(void)_updatePairedState:(char)arg1 ;
-(char)addLocalPairedDevice:(id)arg1 BTOutOfBandKey:(id)arg2 shouldPairDirectlyOverIPsec:(char)arg3 pairingType:(long long)arg4 bluetoothMACAddress:(id)arg5 ;
-(char)removeLocalPairedDevice:(id)arg1 ;
-(void)disconnectActivePairedDevice;
-(void)updateNetworkRelayStateForAllPairedDevices;
-(void)ensureCommunicationWithActivePairedDeviceIsPossible;
-(id)localDeviceRecord;
-(id)pairedDeviceRecords;
-(void)registerPairedDeviceWithUniqueID:(id)arg1 didConnectBlock:(/*^block*/id)arg2 ;
-(char)updateLocalPairedDevice:(id)arg1 pairingType:(long long)arg2 ;
-(void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 wasInitiallySetupUsingIDSPairing:(char)arg2 maxCompatibilityVersion:(id)arg3 BTOutOfBandKey:(id)arg4 supportsIPsecWithSPPLink:(char)arg5 bluetoothMACAddress:(id)arg6 ;
-(char)_isIPSecLinkEnabled;
-(char)updatePairedDeviceiCloudURIs:(id)arg1 pushToken:(id)arg2 ;
-(void)refreshPairedDeviceEncryptionKeys;
@end

