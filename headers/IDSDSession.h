/*
* This header is generated by classdump-dyld 1.0
* on Thursday, March 2, 2023 at 12:48:00 PM Israel Standard Time
* Operating System: Version 11.2.3 (Build 20D91)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/Contents/MacOS/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <identityservicesd/identityservicesd-Structs.h>
#import <libobjc.A.dylib/IDSDSessionAWDMetrics.h>
#import <libobjc.A.dylib/_IDSSessionConnectionDelegate.h>
#import <libobjc.A.dylib/IDSSocketPairConnectionDelegate.h>
#import <libobjc.A.dylib/IDSBaseSocketPairConnectionDelegate.h>
#import <libobjc.A.dylib/IDSRealTimeEncryptionDelegate.h>
#import <libobjc.A.dylib/IDSDSession.h>

@protocol IDSDSession
@required
-(char)isWithDefaultPairedDevice;
-(void)endSessionWithReason:(unsigned)arg1;
-(void)networkingIsAvailable:(/*^block*/id)arg1;
-(void)registerClientChannel;
-(void)handleAVConferenceError:(id)arg1;
-(void)startQRSession;
-(void)openSocketToDevice:(id)arg1;
-(void)invitationDeclined;
-(void)reinitiate;
-(void)didSessionReinitiated;
-(void)sendCancelInvitationMessage;

@end


@protocol IDSDSessionAvailabilityCheck;
@class NSDate, NSString, IDSBaseSocketPairConnection, NSMutableArray, IDSClientChannel, IDSConnectionContext, NSMutableDictionary, IDSGroupStatusNotificationParameters, NSNumber, NSMutableData, NSData, IDSMultiplexerGroupSessionTransport, IDSDSessionInvitationManager, IDSDSessionMessenger, IDSDSessionSharedState;

@interface IDSDSession : NSObject <IDSDSessionAWDMetrics, _IDSSessionConnectionDelegate, IDSSocketPairConnectionDelegate, IDSBaseSocketPairConnectionDelegate, IDSRealTimeEncryptionDelegate, IDSDSession> {

	char _assertedRealTimeMode;
	id<IDSDSessionAvailabilityCheck> _availabilityCheck;
	NSDate* _awdStartTimestamp;
	NSString* _awdUniqueId;
	IDSBaseSocketPairConnection* _baseSocketPairConnection;
	char _bypassUTun;
	NSMutableArray* _cachedClientData;
	long long _cachedNumberOfActiveParticipants;
	IDSClientChannel* _clientChannel;
	unsigned long long _connectionClaimed;
	IDSConnectionContext* _connectionContext;
	unsigned _currentGenerationCounter;
	char _disallowCellularInterface;
	char _disallowWifiInterface;
	NSDate* _endDate;
	NSMutableDictionary* _extraConnections;
	unsigned long long _extraConnectionCount;
	unsigned _groupSessionState;
	IDSGroupStatusNotificationParameters* _groupStatusNotificationParams;
	int _idsDataChannelClientPID;
	unsigned long long _initialLinkType;
	NSString* _instanceID;
	double _inviteRecvTime;
	char _joinGroupSessionPending;
	/*^block*/id _joinNotificationDeliveryTimeoutBlock;
	unsigned char _keyMaterial[60];
	long long _linkProtocol;
	double _membershipChangeEventTime;
	double _newKeyEventTime;
	/*function pointer*/void** _packetBufferArray[8];
	unsigned long long _preferredAddressFamily;
	char _preferCellularForCallSetup;
	NSNumber* _qrError;
	NSMutableArray* _qrEventsForRTCReports;
	NSNumber* _qrReason;
	unsigned _reason;
	unsigned short _relayPort;
	char _sessionStartedCalled;
	NSMutableData* _sessionInfoMetaData;
	char _shouldAssertRealTimeMode;
	char _shouldConnectToQRServer;
	NSData* _skeData;
	int _socketDescriptor;
	NSDate* _startDate;
	char _supressClientNotifications;
	char _verboseFunctionalLogging;
	char _verbosePerformanceLogging;
	char _multiplexerEnabled;
	IDSMultiplexerGroupSessionTransport* _multiplexerTransport;
	double _channelDataCachedTime;
	NSString* _clientID;
	IDSDSessionInvitationManager* _invitationManager;
	IDSDSessionMessenger* _messenger;
	IDSDSessionSharedState* _sharedState;

}

@property (nonatomic,retain) IDSDSessionSharedState * sharedState;                          //@synthesize sharedState=_sharedState - In the implementation block
@property (nonatomic,retain) NSString * clientID;                                           //@synthesize clientID=_clientID - In the implementation block
@property (nonatomic,readonly) char disallowCellularInterface;                              //@synthesize disallowCellularInterface=_disallowCellularInterface - In the implementation block
@property (nonatomic,readonly) char disallowWifiInterface;                                  //@synthesize disallowWifiInterface=_disallowWifiInterface - In the implementation block
@property (nonatomic,readonly) unsigned groupSessionState;                                  //@synthesize groupSessionState=_groupSessionState - In the implementation block
@property (nonatomic,readonly) NSString * instanceID;                                       //@synthesize instanceID=_instanceID - In the implementation block
@property (nonatomic,retain) IDSDSessionInvitationManager * invitationManager;              //@synthesize invitationManager=_invitationManager - In the implementation block
@property (nonatomic,readonly) char* keyMaterial; 
@property (nonatomic,retain) IDSDSessionMessenger * messenger;                              //@synthesize messenger=_messenger - In the implementation block
@property (nonatomic,retain) NSNumber * qrError;                                            //@synthesize qrError=_qrError - In the implementation block
@property (nonatomic,retain) NSNumber * qrReason;                                           //@synthesize qrReason=_qrReason - In the implementation block
@property (assign,nonatomic) char shouldConnectToQRServer;                                  //@synthesize shouldConnectToQRServer=_shouldConnectToQRServer - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(NSString *)description;
-(unsigned)state;
-(id)uniqueID;
-(void)connection:(id)arg1 didReceiveData:(id)arg2 ;
-(char)isInitiator;
-(id)groupID;
-(void)setPreferences:(id)arg1 ;
-(id)accountID;
-(id)participantID;
-(void)acceptInvitation;
-(void)cancelInvitation;
-(id)initWithAccount:(id)arg1 destinations:(id)arg2 options:(id)arg3 ;
-(NSString *)instanceID;
-(NSString *)clientID;
-(void)setClientID:(NSString *)arg1 ;
-(id)destinations;
-(void)setMuted:(char)arg1 ;
-(void)updateMembers:(id)arg1 withContext:(id)arg2 triggeredLocally:(char)arg3 ;
-(void)updateParticipantData:(id)arg1 withContext:(id)arg2 ;
-(void)joinWithOptions:(id)arg1 ;
-(void)endSession;
-(void)sendAllocationRequest:(id)arg1 ;
-(void)sendInvitationWithData:(id)arg1 declineOnError:(char)arg2 ;
-(void)cancelInvitationWithData:(id)arg1 ;
-(void)cancelInvitationWithRemoteEndedReasonOverride:(unsigned)arg1 ;
-(void)acceptInvitationWithData:(id)arg1 ;
-(void)declineInvitation;
-(void)declineInvitationWithData:(id)arg1 ;
-(void)reconnectSession;
-(void)endSessionWithData:(id)arg1 ;
-(void)sendSessionMessage:(id)arg1 toDestinations:(id)arg2 ;
-(void)setAudioEnabled:(char)arg1 ;
-(void)setInviteTimeout:(long long)arg1 ;
-(id)fromID;
-(void)requestSessionInfoWithOptions:(id)arg1 ;
-(long long)clientType;
-(char)isWithDefaultPairedDevice;
-(void)link:(id)arg1 didAddQREvent:(id)arg2 ;
-(void)link:(id)arg1 didConnectUnderlyingLink:(char)arg2 linkUUID:(id)arg3 localAttributes:(id)arg4 remoteAttributes:(id)arg5 ;
-(void)link:(id)arg1 didDisconnectUnderlyingLinkID:(char)arg2 linkUUID:(id)arg3 reason:(unsigned char)arg4 ;
-(void)link:(id)arg1 didDefaultUnderlyingLinkChangeSucceeded:(char)arg2 currentDefaultLinkID:(char)arg3 ;
-(void)link:(id)arg1 didConnectForDeviceUniqueID:(id)arg2 cbuuid:(id)arg3 ;
-(void)link:(id)arg1 didReceiveSKEData:(id)arg2 ;
-(void)link:(id)arg1 didRATChange:(unsigned char)arg2 ;
-(void)link:(id)arg1 didCellularMTUChange:(unsigned short)arg2 ;
-(void)link:(id)arg1 didReceiveReportEvent:(id)arg2 ;
-(void)link:(id)arg1 didGetLinkProbingStatus:(id)arg2 ;
-(char)link:(id)arg1 didReceivePacket:(SCD_Struct_ID4*)arg2 fromDeviceUniqueID:(id)arg3 cbuuid:(id)arg4 ;
-(void)link:(id)arg1 didReceiveSessionInfo:(id)arg2 relayGroupID:(id)arg3 relaySessionID:(id)arg4 success:(char)arg5 ;
-(void)link:(id)arg1 didDisconnectForDeviceUniqueID:(id)arg2 cbuuid:(id)arg3 ;
-(void)link:(id)arg1 didWiFiNWPathFlagsChanged:(unsigned short)arg2 ;
-(void)link:(id)arg1 didCellularNWPathFlagsChanged:(unsigned short)arg2 ;
-(void)link:(id)arg1 didSoMaskChange:(unsigned)arg2 ;
-(id)connectDuration;
-(IDSDSessionMessenger *)messenger;
-(void)setMessenger:(IDSDSessionMessenger *)arg1 ;
-(id)sessionDuration;
-(void)_endSession;
-(IDSDSessionSharedState *)sharedState;
-(char*)keyMaterial;
-(void)endSessionWithReason:(unsigned)arg1 ;
-(void)receivedSessionMessage:(id)arg1 fromID:(id)arg2 ;
-(void)receivedEndMessage:(id)arg1 fromID:(id)arg2 ;
-(void)setRemoteUsePhoneContinuityLocalMessage:(id)arg1 ;
-(void)setSharedState:(IDSDSessionSharedState *)arg1 ;
-(char)isScreenSharingSession;
-(char)enableQuickRelay;
-(void)networkingIsAvailable:(/*^block*/id)arg1 ;
-(void)submitAWDMetricsForIDSSessionInvitationSentWithNumberOfRecipients:(id)arg1 ;
-(unsigned long long)connectionCountHint;
-(void)registerClientChannel;
-(void)submitAWDMetricsForIDSSessionCancelSentWithRemoteEndReason:(unsigned)arg1 numberOfRecipients:(id)arg2 ;
-(void)handleAVConferenceError:(id)arg1 ;
-(id)_acceptedDeviceUniqueID;
-(void)startQRSession;
-(void)openSocketToDevice:(id)arg1 ;
-(void)submitAWDMetricsForIDSSessionAcceptSent;
-(void)declineInvitationWithData:(id)arg1 forceFromID:(id)arg2 additionalMessageAttributes:(id)arg3 ;
-(void)submitAWDMetricsForIDSSessionDeclineSent;
-(void)submitAWDMetricsForIDSSessionAcceptReceived;
-(void)setRemoteUseCloudPairedControlChannel:(id)arg1 ;
-(void)setSSRCRecv:(unsigned)arg1 ;
-(void)setSeqRecvStart:(unsigned)arg1 ;
-(void)setRemoteBlob:(id)arg1 ;
-(void)submitAWDMetricsForIDSSessionDeclineReceived;
-(void)invitationDeclined;
-(void)submitAWDMetricsForIDSSessionCancelReceived;
-(void)sendInvitationWithOptions:(id)arg1 declineOnError:(char)arg2 ;
-(id)_acceptedDeviceToken;
-(void)receivedAcceptMessage:(id)arg1 fromID:(id)arg2 ;
-(void)receivedDeclineMessage:(id)arg1 fromID:(id)arg2 ;
-(void)receivedCancelMessage:(id)arg1 fromID:(id)arg2 ;
-(void)setQuickRelaySessionToken:(id)arg1 ;
-(id)initWithAccount:(id)arg1 destinations:(id)arg2 options:(id)arg3 availabilityCheck:(id)arg4 ;
-(IDSDSessionInvitationManager *)invitationManager;
-(long long)_loggingFlags;
-(void)_setLinkProtocol:(id)arg1 ;
-(void)registerMultiplexerTransport;
-(void)_selectDefaultMic;
-(void)submitAWDMetricsForIDSSessionStarted;
-(void)_resetPreferences:(id)arg1 ;
-(void)_cleanupSessionConnection;
-(void)_checkAndUnassertRealTimeMode;
-(void)_connectQRDirectlyToClientChannel:(id)arg1 ;
-(char)_checkAndSendCachedDataForClient:(id)arg1 ;
-(void)_checkAndRunClientChannelTests:(id)arg1 ;
-(void)_connectSocketDescriptor:(int)arg1 toClientChannel:(id)arg2 ;
-(void)_invalidateClientChannel:(id)arg1 ;
-(void)writeToClientChannel:(id)arg1 packetBuffer:(SCD_Struct_ID4*)arg2 metaData:(const char*)arg3 metadataSize:(unsigned)arg4 ;
-(void)didReceiveCurrentCellularSignalRaw:(int)arg1 signalStrength:(int)arg2 signalGrade:(int)arg3 ;
-(void)_sendingOfflineActiveParticipantInfoRequest:(id)arg1 ;
-(id)_getNewLinkOptionsForActiveParticipantInfoRequest;
-(char)disallowCellularInterface;
-(char)disallowWifiInterface;
-(unsigned)globalLinkErrorToSessionEndReason:(long long)arg1 ;
-(void)_sendSessionEndWithData:(id)arg1 ;
-(void)_startJoinNotificationDeliveryTimeout;
-(void)_noteJoinNotificationDidDeliverWithSuccess:(char)arg1 ;
-(double)_serverSpecifiedJoinNotificationDeliveryTimeout;
-(char)_shouldUseIPsecLink;
-(id)_socketOptionsForDevice:(id)arg1 uniqueID:(id)arg2 pushToken:(id)arg3 connectionSuffix:(id)arg4 ;
-(void)_setInitialLinkType:(unsigned long long)arg1 ;
-(void)checkAndCallSessionStart;
-(void)_sessionStartWithSocketDescriptor:(int)arg1 ;
-(void)_broadcastSessionStartWithSocket:(int)arg1 ;
-(void)submitAWDMetricsForIDSSessionConnected;
-(void)setHasPendingAllocation:(char)arg1 forIDSSession:(id)arg2 ;
-(void)_reportRTC;
-(void)_cleanupSocketPairConnection;
-(void)_notifyClientsSessionStopped;
-(void)_closeSocketToDevice:(id)arg1 ;
-(void)_cleanupQuickRelaySession;
-(void)reinitiate;
-(void)didSessionReinitiated;
-(void)setShouldConnectToQRServer:(char)arg1 ;
-(void)submitAWDMetricsForIDSSessionCompleted;
-(id)getFromService;
-(id)getCallerCert;
-(void)submitAWDMetricsForIDSSessionWithEndReason:(unsigned)arg1 ;
-(void)addQREventForRTCReport:(id)arg1 ;
-(void)getActiveParticipants:(id)arg1 pushTokenForParticipants:(id)arg2 ;
-(void)recvMembershipChangeEventWithReason:(unsigned char)arg1 ;
-(id)_checkIfPushMessageSizeGreaterThanMaxLimit:(id)arg1 maxLimit:(unsigned long long)arg2 ;
-(void)setGroupStreamInfo:(id)arg1 sessionInfo:(id)arg2 ;
-(void)connectQRServer:(id)arg1 withPreferredLocalInterface:(int)arg2 ;
-(void)link:(id)arg1 didReceiveEncryptionInformation:(id)arg2 ;
-(void)link:(id)arg1 didReceiveMembershipChangedInformation:(unsigned char)arg2 ;
-(void)_updateActiveParticipants:(id)arg1 ;
-(void)submitAWDMetricsForIDSSessionReinitiateRequested;
-(void)submitAWDMetricsForIDSSessionReinitiateStarted;
-(void)_receivedReinitiateRequestMessage:(id)arg1 fromID:(id)arg2 ;
-(void)_receivedReinitiateTeardownMessage:(id)arg1 fromID:(id)arg2 ;
-(void)_receivedReinitiateTeardownAckMessage:(id)arg1 fromID:(id)arg2 ;
-(void)_receivedReinitiateBringupMessage:(id)arg1 fromID:(id)arg2 ;
-(void)_receivedReinitiateBringupAckMessage:(id)arg1 fromID:(id)arg2 ;
-(void)submitAWDMetricsForIDSSessionReinitiateConnected;
-(void)connection:(id)arg1 didStart:(char)arg2 error:(id)arg3 ;
-(void)connectionDidStop:(id)arg1 error:(id)arg2 ;
-(void)connection:(id)arg1 receivedData:(id)arg2 ;
-(void)sendKeyMaterialMessage:(id)arg1 toDestination:(id)arg2 ;
-(void)recvKeyMaterial:(id)arg1 ;
-(void)sendCancelInvitationMessage;
-(void)reportFirstMKMReceived:(double)arg1 ;
-(void)setAcceptedRelaySession:(id)arg1 ;
-(id)getAppID;
-(void)runConnectivityCheckWithCompletionBlock:(/*^block*/id)arg1 ;
-(void)startListeningOnClientSocket:(int)arg1 isRawSocket:(char)arg2 ;
-(void)cleanupSession;
-(void)link:(id)arg1 didReceiveDebugDataForClient:(id)arg2 dataType:(unsigned char)arg3 ;
-(void)link:(id)arg1 didReceiveSessionStats:(id)arg2 relayGroupID:(id)arg3 relaySessionID:(id)arg4 success:(char)arg5 ;
-(char)destinationsContainFromID:(id)arg1 ;
-(void)leaveGroupSession:(id)arg1 ;
-(void)onParticipantID2PushTokenMappingChange:(id)arg1 ;
-(void)processAllocationErrorStatus:(int)arg1 errorCode:(int)arg2 ;
-(void)receivedReinitiateMessage:(id)arg1 fromID:(id)arg2 ;
-(void)_setClientType:(long long)arg1 ;
-(char)_useBTDatagramPipe;
-(unsigned)groupSessionState;
-(void)setInvitationManager:(IDSDSessionInvitationManager *)arg1 ;
-(NSNumber *)qrError;
-(void)setQrError:(NSNumber *)arg1 ;
-(NSNumber *)qrReason;
-(void)setQrReason:(NSNumber *)arg1 ;
-(char)shouldConnectToQRServer;
-(char)_shouldSubmitMetricsBasedOnDate:(id)arg1 isInitiator:(char)arg2 ;
-(char)_shouldSubmitMetricsForThisSession;
-(void)submitAWDMetricsForIDSSessionInvitationReceived;
@end

