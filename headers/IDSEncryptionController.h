/*
* This header is generated by classdump-dyld 1.0
* on Thursday, March 2, 2023 at 12:48:16 PM Israel Standard Time
* Operating System: Version 11.2.3 (Build 20D91)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/Contents/MacOS/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class IDSRateLimiter, IDSEncryptionQueueManager, IDSPeerIDManager, IDSRegistrationKeyManager, IDSOTRController, IDSPublicKeyStorage, IDSDAccountController;

@interface IDSEncryptionController : NSObject {

	IDSRateLimiter* _failedTokenCache;
	IDSEncryptionQueueManager* _queueManager;
	IDSPeerIDManager* _peerIDManager;
	IDSRegistrationKeyManager* _registrationKeyManager;
	IDSOTRController* _OTRController;
	IDSPublicKeyStorage* _publicKeyStorage;
	IDSDAccountController* _accountController;

}

@property (nonatomic,retain) IDSRateLimiter * failedTokenCache;                               //@synthesize failedTokenCache=_failedTokenCache - In the implementation block
@property (nonatomic,retain) IDSEncryptionQueueManager * queueManager;                        //@synthesize queueManager=_queueManager - In the implementation block
@property (nonatomic,retain) IDSPeerIDManager * peerIDManager;                                //@synthesize peerIDManager=_peerIDManager - In the implementation block
@property (nonatomic,retain) IDSRegistrationKeyManager * registrationKeyManager;              //@synthesize registrationKeyManager=_registrationKeyManager - In the implementation block
@property (nonatomic,retain) IDSOTRController * OTRController;                                //@synthesize OTRController=_OTRController - In the implementation block
@property (nonatomic,retain) IDSPublicKeyStorage * publicKeyStorage;                          //@synthesize publicKeyStorage=_publicKeyStorage - In the implementation block
@property (nonatomic,retain) IDSDAccountController * accountController;                       //@synthesize accountController=_accountController - In the implementation block
+(id)sharedInstance;
-(id)init;
-(IDSOTRController *)OTRController;
-(IDSDAccountController *)accountController;
-(void)setAccountController:(IDSDAccountController *)arg1 ;
-(IDSEncryptionQueueManager *)queueManager;
-(void)setQueueManager:(IDSEncryptionQueueManager *)arg1 ;
-(IDSPeerIDManager *)peerIDManager;
-(void)setPeerIDManager:(IDSPeerIDManager *)arg1 ;
-(IDSRegistrationKeyManager *)registrationKeyManager;
-(IDSPublicKeyStorage *)publicKeyStorage;
-(void)setPublicKeyStorage:(IDSPublicKeyStorage *)arg1 ;
-(void)setRegistrationKeyManager:(IDSRegistrationKeyManager *)arg1 ;
-(void)setOTRController:(IDSOTRController *)arg1 ;
-(void)publicKeyDecryptData:(id)arg1 fromURI:(id)arg2 identity:(id)arg3 toURI:(id)arg4 pushToken:(id)arg5 service:(id)arg6 priority:(long long)arg7 isRetry:(char)arg8 replayKey:(id)arg9 publicKeyType:(long long)arg10 completionBlock:(/*^block*/id)arg11 avoidMainQueue:(char)arg12 ;
-(id)publicKeyDecryptData:(id)arg1 toDeviceID:(id)arg2 publicKeyType:(long long)arg3 priority:(long long)arg4 error:(id*)arg5 ;
-(void)publicKeyEncryptData:(id)arg1 fromURI:(id)arg2 identity:(id)arg3 toURI:(id)arg4 pushToken:(id)arg5 service:(id)arg6 priority:(long long)arg7 completionBlock:(/*^block*/id)arg8 forceLegacy:(char)arg9 avoidMainQueue:(char)arg10 ;
-(id)publicKeyEncryptData:(id)arg1 toDeviceID:(id)arg2 publicKeyType:(long long)arg3 priority:(long long)arg4 error:(id*)arg5 ;
-(id)OTREncryptData:(id)arg1 OTRToken:(id)arg2 priority:(long long)arg3 error:(long long*)arg4 ;
-(void)publicKeyEncryptData:(id)arg1 toDeviceID:(id)arg2 priority:(long long)arg3 publicKeyType:(long long)arg4 completionBlock:(/*^block*/id)arg5 ;
-(id)OTRDecryptData:(id)arg1 OTRToken:(id)arg2 priority:(long long)arg3 error:(long long*)arg4 ;
-(void)publicKeyDecryptData:(id)arg1 toDeviceID:(id)arg2 priority:(long long)arg3 publicKeyType:(long long)arg4 completionBlock:(/*^block*/id)arg5 ;
-(id)legacyPublicKeyEncryptData:(id)arg1 toEndpoint:(id)arg2 priority:(long long)arg3 error:(id*)arg4 ;
-(id)publicKeyEncryptData:(id)arg1 toEndpoint:(id)arg2 usedEncryptionType:(long long*)arg3 priority:(long long)arg4 error:(id*)arg5 ;
-(id)initWithPeerIDManager:(id)arg1 registrationKeyManager:(id)arg2 OTRController:(id)arg3 publicKeyStorage:(id)arg4 accountController:(id)arg5 queueManager:(id)arg6 failedTokenCache:(id)arg7 ;
-(id)_builderAvoidMainQueue:(char)arg1 forceLegacy:(char)arg2 ;
-(void)_decryptData:(id)arg1 encrypter:(id)arg2 pkType:(long long)arg3 isRetry:(char)arg4 priority:(long long)arg5 replayKey:(id)arg6 completion:(/*^block*/id)arg7 ;
-(void)_encryptData:(id)arg1 encrypter:(id)arg2 priority:(long long)arg3 completion:(/*^block*/id)arg4 ;
-(void)performSyncBlock:(/*^block*/id)arg1 priority:(long long)arg2 ;
-(id)publicKeyDecryptData:(id)arg1 fromEndpoint:(id)arg2 pkType:(long long)arg3 priority:(long long)arg4 error:(id*)arg5 ;
-(void)publicKeyDecryptData:(id)arg1 fromEndpoint:(id)arg2 pkType:(long long)arg3 priority:(long long)arg4 replayKey:(id)arg5 completionBlock:(/*^block*/id)arg6 ;
-(void)performAsyncBlock:(/*^block*/id)arg1 priority:(long long)arg2 ;
-(void)logEncryptionErrorForToken:(id)arg1 deviceID:(id)arg2 forURI:(id)arg3 fromURI:(id)arg4 forService:(id)arg5 messageData:(id)arg6 type:(long long)arg7 ;
-(void)logRemoteDecryptionErrorForToken:(id)arg1 deviceID:(id)arg2 forURI:(id)arg3 fromURI:(id)arg4 forService:(id)arg5 messageData:(id)arg6 type:(long long)arg7 ;
-(IDSRateLimiter *)failedTokenCache;
-(void)setFailedTokenCache:(IDSRateLimiter *)arg1 ;
@end

